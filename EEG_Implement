def EEG_Implement(EEG_raw, RecordedColumns = 32, Channels = 16, Timestep = 256, 
                  TestDuration = 2, TimeColumn = 1, ElectrodeList = ['Fp1', 'Fp2', 'F3', 'F4', 'T5', 'T6', '01', '02', 'F7', 'F8', 'C3', 'C4', 'T3', 'T4', 'P3', 'P4']):
    
    import numpy as np
    import statistics
    
    """

    Parameters
    ----------
    EEG_raw : string
        path of EEG file in users directory
    RecordedColumns : Int
        number of total columns in text document uploaded --
        16 channels + ~15 dead lines + 1 time line
        Default is 32
    Channels : Int
        number of electrode channels being used for EEG recording. This program
        assumes that the EEG channels are adjacent to one another in the text
        document when data is recorded, IE: eeg columns 1-16 = channels, 17-32 != channels
    
    Timestep : Int
        timestep used between electrode measurements, 1/(Timestep) seconds
        is measurement time used
        Default is 256
    
    TestDuration: Int
        time in seconds that each EEG test lasts for in the compiled dataset
        
    TimeChannel : Int
        Column number in which the time values are recorded. Used 

    Returns
    -------
    [EEG_Dict, EEG_Med, EEG_Delta, EEG_Time]: list
    
    EEG_Dict: Dictionary of lists
    The value of each electrode data output for each trial, at each individual timestep,
    categorized into a dictionary object for access.
    
    EEG_Med: Dictionary of int
    Median value of the first 1/2 of EEG values recorded on a given trial at a given
    electrode.
    
    EEG_Delta: Dictionary of lists
    Records the individual difference from average resting EEG value of a given trial.
    Resting EEG value is determined to be the median of the first 1/2 of EEG values recorded,
    with that difference applied to all other values.
    The Dictionary has each list object named based on 1.) The electrodes name,
    and 2.) the trial number, with each trial being calculated from Timestep and TestDuration
    Values in the list object are indexed based on their test duration, with values divided
    by Timestep*TestDuration to return seconds.
    
    EEG_Time: Dictionary of lists
    Contains Trials*ELectrodes lists of ranges 0 to TestDuration*Timestep for use in
    indexing.

    """
    
    EEG_access = open(EEG_raw, 'r') #reads EEG path, calls for access
    EEG_access = EEG_access.read() 
    EEG_access = EEG_access.split() #creates large list for later separation
    
    EEG_use = [[] for A in range(RecordedColumns)] #recording location
    
    lenCheck = 0
    
    while (lenCheck*(RecordedColumns))<len(EEG_access): #indices over all values in text file
    
        for EEG_throughput in range(RecordedColumns):
            EEG_use[EEG_throughput].append(EEG_access[EEG_throughput+lenCheck*(RecordedColumns)])
            #This code could be optimized by skipping over unused columns rather than deleting at the end of sequence
            
        lenCheck=lenCheck+1
    
    TimeRange = EEG_use[TimeColumn-1] #takes out the time values prior to erasure
    
    
    #Determination of total trials completed
    Trials = int(len(TimeRange)/(Timestep*TestDuration))
    
    #Removes unused columns from input data
    EEG_use[(Channels+1):(RecordedColumns+1)] = []
    
    #Time column is unecessary as given Timestep and TestDuration we can calculate based on position
    del EEG_use[TimeColumn-1]
    
    #Creates dictionary object to store all EEG data based on electrode name and position
    EEG_Dict = {}
    
    for H in range(len(ElectrodeList)):
        for I in range(Trials):
            EEG_Dict[ElectrodeList[H]+' trial ' + str(I+1)] =[]
            for J in range(TestDuration*Timestep):
                EEG_Dict[ElectrodeList[H]+' trial ' + str(I+1)].append(float(EEG_use[H][J+I*TestDuration*Timestep]))
    
    #Creates dictionary of Median Electrode EEG values at resting 
    EEG_Med = {}
    
    for H in range(len(ElectrodeList)):
        for I in range(Trials):
            EEG_Med[ElectrodeList[H]+' trial ' + str(I+1) + ' Median'] = statistics.median(EEG_Dict[ElectrodeList[H]+' trial ' + str(I+1)][1:(Timestep*(TestDuration//2))])

    #Creates dictionary of Delta values, the differences between instantaneous EEG value and EEG_Avg at an electrode
    EEG_Delta = {}
    
    for H in range(len(ElectrodeList)):
        for I in range(Trials):
            EEG_Delta[ElectrodeList[H]+' trial ' + str(I+1)] =[]
            for J in range(TestDuration*Timestep):
                EEG_Delta[ElectrodeList[H]+' trial ' + str(I+1)].append(EEG_Dict[ElectrodeList[H]+' trial ' + str(I+1)][J]-EEG_Med[ElectrodeList[H]+' trial ' + str(I+1) + ' Median'])
    
    #Time dictionary created in the case where each point needs an associated timestep to draw from
    EEG_Time = {}
    
    for I in range(Trials):
        EEG_Time['Trial '+str(I+1)] = list(range(Timestep*TestDuration))
    
    return [EEG_Dict, EEG_Med, EEG_Delta,EEG_Time] #returns list of deltas and associated times for each trial
    
if __name__ == '__main__':
    ExampleCase = EEG_Implement('/Users/mason/Downloads/Example_EEG.txt')
    #Copy the path of the EEG file and input it. Make sure the data is COMPLETE, IE: 1-512 timesteps of each trial is recorded in order
    #See "Example_EEG" to see how this should be set up

    
